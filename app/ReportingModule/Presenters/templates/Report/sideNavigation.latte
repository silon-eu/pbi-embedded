{block title}{$tile->ref(rep_tabs)->name} / {$tile->name}{/block}
{block header_tmpl}
{/block}

{block pageHeading}
    <span class="text-light d-inline-block px-2">/</span>
    <a n:href=":Reporting:Dashboard:default, activeTab => $tile->rep_tabs_id" class="text-white">{$tile->ref(rep_tabs)->name}</a>
    <span class="text-light d-inline-block px-2">/</span>
    {$tile->name}
{/block}

{block header}
{/block}

{block content}
    {var $today = new DateTime()}
    <div class="row">
        <div class="col-2 pt-3 position-relative">
            {snippet reportUserMenu}
                <ul id="left-report-nav" class="nav flex-column">
                    <li class="nav-item mb-1 position-relative" n:foreach="$navigation as $navItemKey => $navItem">
                        <a n:class="$activePageData && $activePageData->id === $navItem['id'] ? 'active', 'nav-link ajax'" href="{if $activePageData->id !== $navItem['id']}{plink changePage!, activePageId => $navItem['id']}{else}#{/if}" data-page="{$navItem['page']}">
                            {$navItem['name']}
                            <i
                                n:if="$presenter->userIsAdmin() && empty($navItem['filters'])"
                                class="bi bi-exclamation-triangle-fill text-warning ms-1"
                                data-bs-toggle="tooltip"
                                data-bs-placement="right"
                                data-bs-title="No filters are set for this page"
                            ></i>
                            <i
                                n:if="$presenter->userIsAdmin() && empty($navItem['slicers'])"
                                class="bi bi-exclamation-triangle-fill text-warning ms-1"
                                data-bs-toggle="tooltip"
                                data-bs-placement="right"
                                data-bs-title="No defaults are set for visuals"
                            ></i>
                            <i
                                n:if="$presenter->userIsAdmin() && $navItem['hasPermissions'] === false"
                                class="bi bi-shield-lock-fill text-warning ms-1"
                                data-bs-toggle="tooltip"
                                data-bs-placement="right"
                                data-bs-title="No permissions are set for this page"
                            ></i>
                        </a>
                        {if $presenter->userIsAdmin()}
                            <a class="dropdown-toggle item-menu" data-bs-toggle="dropdown"></a>
                            <ul class="dropdown-menu">
                                <li><a class="dropdown-item ajax" n:href="showPageForm!,editPageId=>$navItem['id']" data-naja-history="off">Edit</a></li>
                                <li><a class="dropdown-item ajax" n:href="showCopyOrMovePageForm!,editPageId=>$navItem['id']" data-naja-history="off">Copy or move</a></li>
                                <li><a class="dropdown-item ajax" data-confirm="Do you really want to delete this page?" n:href="deletePage!,editPageId=>$navItem['id']" data-naja-history="off">Delete</a></li>
                                <li n:if="count($navigation)>1"><hr class="dropdown-divider"></li>
                                <li n:if="!$iterator->isFirst()">
                                    <a class="dropdown-item ajax" n:href="changePagePosition!,editPageId=>$navItem['id'],direction=>'decrease'" data-naja-history="off">
                                        Move up
                                    </a>
                                </li>
                                <li n:if="!$iterator->isLast()">
                                    <a class="dropdown-item ajax" n:href="changePagePosition!,editPageId=>$navItem['id'],direction=>'increase'" data-naja-history="off">
                                        Move down
                                    </a>
                                </li>
                            </ul>
                        {/if}
                        {* SUBMENU - TODO copy everything from main item *}
                        <ul
                            n:if="isset($navItem['items']) && count($navItem['items']) > 0"
                            n:inner-foreach="$navItem['items'] as $subNavItemKey => $subNavItem"
                            class="nav flex-column"
                        >
                            <li class="nav-item">
                                <a n:class="$iterator->parent->first && $iterator->first ? 'active', 'nav-link ajax'" n:href="changePage!, activePageId => $navItem['id']" data-page="{$subNavItemKey}">
                                    {$subNavItem}
                                </a>

                                {if $presenter->userIsAdmin()}
                                    <a class="dropdown-toggle" data-bs-toggle="dropdown"></a>
                                    <ul class="dropdown-menu">
                                        <li><a class="dropdown-item ajax" n:href="showPageForm!,editPageId=>$navItem['id']" data-naja-history="off">Edit</a></li>
                                        <li><a class="dropdown-item ajax" data-confirm="Do you really want to delete this page?" n:href="deletePage!,editPageId=>$navItem['id']" data-naja-history="off">Delete</a></li>
                                        <li n:if="count($navigation)>1"><hr class="dropdown-divider"></li>
                                        <li n:if="!$iterator->isFirst()">
                                            <a class="dropdown-item ajax" n:href="changePagePosition!,editPageId=>$navItem['id'],direction=>'decrease'" data-naja-history="off">
                                                Move up
                                            </a>
                                        </li>
                                        <li n:if="!$iterator->isLast()">
                                            <a class="dropdown-item ajax" n:href="changePagePosition!,editPageId=>$navItem['id'],direction=>'increase'" data-naja-history="off">
                                                Move down
                                            </a>
                                        </li>
                                    </ul>
                                {/if}
                            </li>
                        </ul>
                    </li>
                    <li n:if="$presenter->userIsAdmin()" class="nav-item mt-1 mb-1">
                        <a class="btn btn-sm d-block btn-outline-dark ajax" n:href="showPageForm!">
                            <i class="bi bi-plus-circle-dotted me-2"></i>Add new page
                        </a>
                    </li>
                </ul>
            {/snippet}
            {if $presenter->userIsAdmin()}
                <div class="mt-2 mb-1">
                    <a id="toggleAdminMenu" class="text-body text-uppercase text-decoration-none fw-bold d-block pt-1" data-bs-toggle="collapse" href="#collapseAdminMenu" role="button" aria-expanded="false" aria-controls="collapseAdminMenu">
                        Admin navigation <i class="bi bi-chevron-down float-end"></i><i class="bi bi-chevron-up float-end"></i>
                    </a>
                </div>
                <div class="collapse" id="collapseAdminMenu">
                    <div style="max-height: 400px; overflow-y: auto; overflow-x: hidden;">
                        <p>
                            <a href="{$reportConfig->webUrl}" target="_blank">
                                <i class="bi bi-box-arrow-up-right"></i> Open report in Power BI
                            </a>
                        </p>
                        <ul id="left-admin-nav" class="nav flex-column" n:inner-foreach="$adminNavigation as $adminNavItem">
                            <li class="nav-item mb-1">
                                <a n:class="'nav-link'" href="#" data-page="{$adminNavItem->name}">
                                    {$adminNavItem->displayName}<br>
                                    <small class="opacity-50">{$adminNavItem->name}</small>
                                </a>
                            </li>
                        </ul>
                    </div>
                </div>


                <div class="mt-2 mb-1">
                    <a id="toggleFilterSubstitutions" class="text-body text-uppercase text-decoration-none fw-bold d-block pt-1" data-bs-toggle="collapse" href="#collapseFilterSubstitutions" role="button" aria-expanded="false" aria-controls="collapseFilterSubstitutions">
                        Filter substitutions <i class="bi bi-chevron-down float-end"></i><i class="bi bi-chevron-up float-end"></i>
                    </a>
                </div>
                <div class="collapse" id="collapseFilterSubstitutions">
                    <div style="max-height: 400px; overflow: auto;">
                        <table class="table table-bordered table-sm table-striped" n:inner-foreach="$filterSubstitutions as $fsubKey => $fsubValue">
                            <tr>
                                <td>{$fsubKey}</td><td>{$fsubValue}</td>
                            </tr>
                        </table>
                    </div>
                </div>

            {/if}

            <div class="position-absolute" style="bottom: 0; left: calc(var(--bs-gutter-x) * .5);">
                {if $refreshDates->count() > 0}
                    <p n:foreach="$refreshDates as $refreshDate" class="text-muted mb-0">
                        {!empty($refreshDate->description) ? $refreshDate->description : 'Dataset refresh'}: {$refreshDate->updated_time|date:'d.m.Y H:i:s'}
                    </p>
                {/if}
                <p class="text-muted">
                    Last refresh:
                    {if $reportConfig->datasetLastRefreshDate instanceof \DateTime}
                        {$reportConfig->datasetLastRefreshDate|date:'d.m.Y H:i:s'}
                    {else}
                        {$reportConfig->datasetLastRefreshDate}
                    {/if}
                </p>
            </div>
        </div>
        <div class="col-10 position-relative">
            <div id="report-container" class="with-sidebar"></div>
            <div id="report-toolbar" class="d-flex flex-column justify-content-between align-items-center position-absolute pt-3 pe-3" style="top:0;right:0;">
                {snippet pageToolbarButtons}
                    {if $activePageData}
                        <a n:href="resetFilters!,activePageId => $activePageData->id" class="btn btn-secondary mb-1 ajax"
                                data-bs-toggle="tooltip" data-bs-placement="left" data-bs-title="Reset filters">
                            <i class="bi bi-arrow-counterclockwise"></i>
                        </a>
                        {if isset($activePageData) && !empty($activePageData)}
                            <a n:if="!empty($activePageData->description)" n:href="showPageDescription!" class="btn btn-secondary mb-1 ajax"
                                    data-bs-toggle="tooltip" data-bs-placement="left" data-bs-title="About this report page">
                                <i class="bi bi-info-circle"></i>
                            </a>
                            <a n:if="!empty($activePageData->desc_link)" href="{$activePageData->desc_link}" target="_blank" class="btn btn-secondary mb-1"
                                     data-bs-toggle="tooltip" data-bs-placement="left" data-bs-title="Link to wiki">
                                <i class="bi bi-book"></i>
                            </a>
                            {var $reportProblemSubject = 'Reporting problem - '.$tile->ref(rep_tabs)->name.' / '.$tile->name.' / '.$activePageData->name}
                            {var $reportProblemBody = "Company: {$tile->ref(rep_tabs)->name}\nReport: {$tile->name}\nPage: {$activePageData->name}\nLink: {$presenter->link('//this')}\n\nPlease describe the problem:\n"}
                            <a href="mailto:helpdesk@silon.eu?subject={$reportProblemSubject|escapeUrl}&body={$reportProblemBody|escapeUrl}" class="btn btn-secondary mb-1"
                                     data-bs-toggle="tooltip" data-bs-placement="left" data-bs-title="Report problem to IT helpdesk">
                                <i class="bi bi-envelope-exclamation"></i>
                            </a>
                        {/if}
                        <a n:if="$presenter->userIsAdmin()" n:href="showReportFilterForm!" class="btn btn-outline-secondary ajax mb-1"
                                data-bs-toggle="tooltip" data-bs-placement="left" data-bs-html="true" data-bs-title="Report filters setup<br><i>(admin only)</i>">
                            <i
                                    n:if="empty($tile->filters)"
                                    class="bi bi-exclamation-triangle-fill text-warning me-1"
                                    data-bs-toggle="tooltip"
                                    data-bs-placement="left"
                                    data-bs-title="No filters are set for this report"
                            ></i>
                            <i class="bi bi-funnel"></i>
                        </a>
                    {/if}
                {/snippet}
            </div>
            <p id="report-placeholder" class="placeholder-wave bg-white position-absolute w-100 h-100">
                <span class="placeholder bg-sil-placeholder rp-filter col-2 mx-3 mt-3"></span>
                <span class="placeholder bg-sil-placeholder rp-filter col-3 mx-3 mt-3"></span>
                <span class="placeholder bg-sil-placeholder rp-filter col-2 mx-3 mt-3"></span><br>
                <span class="placeholder bg-sil-placeholder rp-table col-11 mx-3 mt-3"></span><br>
                <span class="placeholder bg-sil-placeholder rp-table col-5 mx-3 mt-3"></span>
                <span class="placeholder bg-sil-placeholder rp-table col-6 mx-3 mt-3"></span>
            </p>
        </div>
    </div>


    <script src="{$basePath}/assets/js/powerbi.min.js"></script>
    <script>
        //let defaultFilters = [];
        let defaultSlicers = [];
        let report = null;
        let reportContainer = document.getElementById("report-container");
        let models = window["powerbi-client"].models;
        //let reportFilters = [];
        let pageFilters = [];

        document.addEventListener("DOMContentLoaded", function() {

            // Initialize iframe for embedding report
            powerbi.bootstrap(reportContainer, { type: "report" });

            // Create a config object with type of the object, Embed details and Token Type
            let reportLoadConfig = {
                type: "report",
                tokenType: models.TokenType.Embed,
                accessToken: {$reportConfig->embedToken},

                // Use other embed report config based on the requirement. We have used the first one for demo purpose
                embedUrl: {$reportConfig->embedUrl},

                // Enable this setting to remove gray shoulders from embedded report
                // settings: {
                //     background: models.BackgroundType.Transparent
                // }

                settings: {
                    // https://learn.microsoft.com/en-us/javascript/api/overview/powerbi/configure-report-settings#configure-edit-mode
                    permissions: models.Permissions.Read,
                    viewMode: models.ViewMode.View,

                    panes: {
                        bookmarks: {
                            visible: false
                        },
                        fields: {
                            expanded: false
                        },
                        filters: {
                            expanded: false,
                            visible: {$presenter->userIsAdmin()}
                        },
                        pageNavigation: {
                            visible: false
                        },
                        selection: {
                            visible: false
                        },
                        syncSlicers: {
                            visible: false
                        },
                        visualizations: {
                            expanded: false
                        }
                    },
                    bars: {
                        actionBar: {
                            visible: true
                        },
                        statusBar: {
                            visible: true
                        }
                    },
                    localeSettings: {
                        language: "en-us"
                    },
                    hideErrors: false,

                    /*Initial page*/
                    {if $activePageData}
                        pageName: {$activePageData->page},
                    {/if}

                    //filters: [...], // https://learn.microsoft.com/en-us/javascript/api/overview/powerbi/control-report-filters

                    //slicers: slicerArray, // https://learn.microsoft.com/en-us/javascript/api/overview/powerbi/control-report-slicers
                    {*if !empty($tile->slicers)}
                        slicers: {$tile->slicers|noescape|applyDynamicProperties},
                    {/if*}

                    // onload bookmark - https://learn.microsoft.com/en-us/javascript/api/overview/powerbi/configure-report-settings#on-load-bookmark
                    {if $presenter->userIsAdmin()}
                        extensions: {
                            commands: [
                                {
                                    name: "copySlicerSettings",
                                    title: "Copy slicer settings",
                                    extend: {
                                        visualOptionsMenu: {
                                            title: "Copy slicer settings",
                                            groupName: "silon-pbie-admin"
                                        }
                                    }
                                },
                                {
                                    name: "copyVisualId",
                                    title: "Copy visual ID",
                                    extend: {
                                        visualOptionsMenu: {
                                            title: "Copy visual ID",
                                            groupName: "silon-pbie-admin"
                                        }
                                    }
                                }
                            ],
                            groups: [
                                {
                                    name: "silon-pbie-admin",
                                    title: "Silon admin",
                                    menuLocation: models.MenuLocation.Top
                                }
                            ]
                        }
                    {/if}

                }

            };

            // Use the token expiry to regenerate Embed token for seamless end user experience
            // Refer https://aka.ms/RefreshEmbedToken
            tokenExpiry = {$reportConfig->expiration};

            // Embed Power BI report when Access token and Embed URL are available
            report = powerbi.embed(reportContainer, reportLoadConfig);

            // Clear any other loaded handler events
            report.off("loaded");

            // Triggers when a report schema is successfully loaded
            report.on("loaded", async function () {
                console.log("Report load successful");

                {if $presenter->userIsAdmin()}
                    const navigation = document.querySelectorAll("#left-admin-nav .nav-link");
                    navigation.forEach(function (link) {
                        link.addEventListener("click", function (e) {
                            e.preventDefault();
                            let page = e.target.getAttribute("data-page");
                            if(page) {
                                report.setPage(page);
                                // set all link to inactive
                                navigation.forEach(function (link) {
                                    link.classList.remove("active");
                                });
                                // set clicked link to active
                                e.target.classList.add("active");
                            }
                        });
                    });
                {/if}

                // Set the first page as active
                {if $activePageData}
                    await report.setPage({$activePageData->page});
                    let activePage = await report.getActivePage();

                    // set default filters
                    {if !empty($activePageData->filters)}
                        await activePage.updateFilters(models.FiltersOperations.ReplaceAll,JSON.parse({$activePageData->filters|applyDynamicProperties}));
                    {/if}


                    {if !empty($activePageData->slicers)}
                        await setDefaultSlicersForPage(JSON.parse({$activePageData->slicers|applyDynamicProperties}));
                    {/if}
                {/if}

                {if !empty($tile->filters)}
                    await report.updateFilters(models.FiltersOperations.ReplaceAll, JSON.parse({$tile->filters|applyDynamicProperties}));
                {/if}
            });

            // Clear any other rendered handler events
            report.off("rendered");

            // Triggers when a report is successfully embedded in UI
            report.on("rendered", function () {
                console.log("Report render successful");
                setTimeout(function () {
                    console.log("Hiding report placeholder");
                    hideReportPlaceholder();
                }, 100);
            });

            // Clear any other error handler events
            report.off("error");

            // Handle embed errors
            report.on("error", function (event) {
                let errorMsg = event.detail;
                console.error(errorMsg);
            });

            // Clear any other pageChanged handler events
            report.off("pageChanged");

            // Save filters on page change
            report.on("pageChanged", async function (event) {
                let page = event.detail.newPage;
                // save slicers
                const visuals = await page.getVisuals();

                let slicers = visuals.filter(function (visual) {
                    return visual.type === "slicer" || visual.type === "advancedSlicerVisual";
                });

                for (const slicer of slicers) {
                    try {
                        const state = await slicer.getSlicerState();
                        // save slicer state
                        if (defaultSlicers[slicer.name] === undefined) {
                            defaultSlicers[slicer.name] = state;
                        }
                    } catch (error) {
                        //console.error("Error getting slicer state for visual " + slicer.name + ": ", error);
                    }
                }

                // save filters
                page.getFilters().then(function (filters) {
                    pageFilters = filters;
                    // save filters
                    /*if (defaultFilters[page.name] === undefined) {
                        defaultFilters[page.name] = filters;
                    }*/
                });

                //hideReportPlaceholder();

            });

            report.on("commandTriggered", async function (event) {
                let commandDetails = event.detail;
                console.log("Event - commandTriggered:\n", commandDetails);
                if (commandDetails.command === "copyVisualId") {
                    // Copy the visual ID to clipboard
                    navigator.clipboard.writeText(commandDetails.visual.name).then(function() {
                        console.log("Visual ID copied to clipboard: " + commandDetails.visual.name);
                    }, function(err) {
                        console.error("Could not copy text: ", err);
                    });
                } else if (commandDetails.command === "copySlicerSettings") {
                    if (commandDetails.visual.type === "slicer" || commandDetails.visual.type === "advancedSlicerVisual") {
                        let activePage = await report.getActivePage();
                        let activeVisuals = await activePage.getVisuals();
                        let visualObject = activeVisuals.filter(function (filter) {
                            return filter.name === commandDetails.visual.name;
                        })[0];
                        let result = {
                            slicerName: commandDetails.visual.name,
                            slicerState: await visualObject.getSlicerState()
                        }
                        // Copy the slicer state to clipboard
                        navigator.clipboard.writeText(JSON.stringify(result, null, 2)).then(function() {
                            console.log("Slicer state copied to clipboard: ", result);
                        }, function(err) {
                            console.error("Could not copy text: ", err);
                        });
                    } else {
                        console.error('Selected visual in not of type slicer')
                    }
                    //console.log(commandDetails.visual);
                    //let visual await report.getVisuals();
                    //console.log(commandDetails.visual.getSlicerState());
                }
            });

            // set default filters for active page on button click
            const setDefaultFiltersButton = document.getElementById("set-default-filters");
            if(setDefaultFiltersButton) {
                setDefaultFiltersButton.addEventListener("click", async function (e) {
                    e.preventDefault();
                    // Retrieve the page collection and then replace filters with the same target data field for the active page.
                    try {
                        const pages = await report.getPages();
                        // Retrieve the active page.
                        let page = pages.filter(function (page) {
                            return page.isActive
                        })[0];
                        //await page.updateFilters(models.FiltersOperations.Replace, defaultFilters[page.name]);

                        const visuals = await page.getVisuals();

                        let slicers = visuals.filter(function (visual) {
                            return visual.type === "slicer" || visual.type === "advancedSlicerVisual";
                        });

                        slicers.forEach(function(slicer) {
                            if (defaultSlicers[slicer.name] !== undefined) {
                                slicer.setSlicerState(defaultSlicers[slicer.name]);
                            } else {
                                slicer.setSlicerState({ filters: [] });
                            }
                        });

                    }
                    catch (errors) {
                        console.log(errors);
                    }
                });
            }
        });

        async function loadReportFilters(button, target = 'formElement', selector = '#frm-reportFilterForm-filters') {
            let currentReportFilters = await report.getFilters();
            if (target === 'formElement') {
                // get form of the button which triggered this function
                let form = button.closest("form");
                let formElement = form.querySelector(selector);
                if (formElement) {
                    try {
                        formElement.value = JSON.stringify(currentReportFilters, null, 2);
                    } catch (e) {
                        console.error("Error parsing filters: ", e);
                    }
                } else {
                    console.error("Form element with selector "+ selector +" not found");
                }
            } else if (target === 'clipboard') {
                navigator.clipboard.writeText(JSON.stringify(currentReportFilters, null, 2)).then(function() {
                    console.log("Filters copied to clipboard: " + JSON.stringify(currentReportFilters, null, 2));
                }, function(err) {
                    console.error("Could not copy text: ", err);
                });
            } else {
                console.error("Unknown target: " + target);
            }
        }

        async function loadPageFilters(button, target = 'formElement', selector = '#frm-pageForm-filters') {
            // get form of the button which triggered this function
            let form = button.closest("form");
            // get value of  form select with name = page
            let pageName = form.querySelector("select[name='page']").value;

            // set report Page
            if (report.getActivePage() !== pageName) {
                await report.setPage(pageName)
            }

            let filtersString = JSON.stringify(pageFilters, null, 2);

            if (target === 'formElement') {
                if (!confirm("Do you really want to replace current filter settings for this page?")) {
                    return;
                }

                let formElement = form.querySelector(selector);
                if (formElement) {
                    formElement.value = filtersString;
                } else {
                    console.error("Form element with selector "+ selector +" not found");
                }
            } else if (target === 'clipboard') {
                navigator.clipboard.writeText(filtersString).then(function() {
                    console.log("Filters copied to clipboard: " + filtersString);
                }, function(err) {
                    console.error("Could not copy text: ", err);
                });
            } else {
                console.error("Unknown target: " + target);
            }
        }

        async function setDefaultSlicersForPage(slicerStates = [], pageName = null, eraseMissing = false) {
            if (!Array.isArray(slicerStates) || slicerStates.length === 0) {
                return;
            }

            // get all visuals on the page
            let page = null;
            if (!pageName) {
                page = await report.getActivePage();
            } else {
                const pages = await report.getPages();
                page = pages.find(p => p.name === pageName);
                if (!page) {
                    console.error(`Page with name ${ pageName} not found`);
                    return;
                }
            }
            const visuals = await page.getVisuals();

            // set slicer state from visualFilters
            for (const visual of visuals) {
                if (visual.type === "slicer" || visual.type === "advancedSlicerVisual") {
                    let filter = slicerStates.find(function (filter) {
                        return filter.slicerName === visual.name;
                    });
                    if (filter) {
                        await visual.setSlicerState(filter.slicerState);
                    } else if (eraseMissing) {
                        await visual.setSlicerState({ filters: [] });
                    }
                }
            }
        }

        function hideReportPlaceholder() {
            const placeholder = document.getElementById("report-placeholder");
            if (placeholder) {
                placeholder.style.display = "none";
            }
        }

        function showReportPlaceholder() {
            const placeholder = document.getElementById("report-placeholder");
            if (placeholder) {
                placeholder.style.display = "block";
            }
        }

    </script>
{/block}