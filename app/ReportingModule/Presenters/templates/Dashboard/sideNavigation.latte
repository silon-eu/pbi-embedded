{block title}{$reportName}{/block}
{block header_tmpl}
{/block}

{block pageHeading}
    <span class="text-light d-inline-block px-2">/</span>
    <a n:href=":Reporting:Dashboard:default, 'activeTab' => 'demo'" class="text-white">SILON CZ</a>
    <span class="text-light d-inline-block px-2">/</span>
    {*{$reportConfig->name}*}
    {$reportName}
    {*<span class="text-light d-inline-block px-2 text-opacity-75 text" style="font-size: 1rem">
        Last refresh:
        {if $reportConfig->datasetLastRefreshDate instanceof \DateTime}
            {$reportConfig->datasetLastRefreshDate|date:'d.m.Y H:i:s'}
        {else}
            {$reportConfig->datasetLastRefreshDate}
        {/if}
    </span>*}
{/block}

{block header}
{/block}

{block content}
    {var $today = new DateTime()}
    <div class="row">
        <div class="col-2 pt-3 position-relative">
            <ul id="left-report-nav" class="nav flex-column" n:inner-foreach="$navigation as $navItemKey => $navItem">
                <li class="nav-item mb-1">
                    <a n:class="$iterator->first ? 'active', 'nav-link'" href="#" data-page="{$navItemKey}">
                        {$navItem['name']}
                    </a>
                    <ul
                        n:if="isset($navItem['items']) && count($navItem['items']) > 0"
                        n:inner-foreach="$navItem['items'] as $subNavItemKey => $subNavItem"
                        class="nav flex-column"
                    >
                        <li class="nav-item">
                            <a n:class="$iterator->parent->first && $iterator->first ? 'active', 'nav-link'" href="#" data-page="{$subNavItemKey}">
                                {$subNavItem}
                            </a>
                        </li>
                    </ul>
                </li>
            </ul>
            <div class="position-absolute" style="bottom: 0; left: calc(var(--bs-gutter-x) * .5);">
                <p class="text-muted">
                    Last refresh:
                    {if $reportConfig->datasetLastRefreshDate instanceof \DateTime}
                        {$reportConfig->datasetLastRefreshDate|date:'d.m.Y H:i:s'}
                    {else}
                        {$reportConfig->datasetLastRefreshDate}
                    {/if}
                </p>
            </div>
        </div>
        <div class="col-10 position-relative">
            <div id="report-container" class="with-sidebar"></div>
            <div id="report-toolbar" class="d-flex flex-column justify-content-between align-items-center position-absolute pt-3 pe-3" style="top:0;right:0;">
                <button type="button" id="set-default-filters" class="btn btn-secondary"><i class="bi bi-arrow-counterclockwise me-2"></i><span>Reset</span></button>
            </div>
        </div>
    </div>


    <script src="{$basePath}/assets/js/powerbi.min.js"></script>
    <script>
        let defaultFilters = [];
        let defaultSlicers = [];
        let report = null;
        let models = window["powerbi-client"].models;
        let reportContainer = document.getElementById("report-container");

        document.addEventListener("DOMContentLoaded", function() {

            // Initialize iframe for embedding report
            powerbi.bootstrap(reportContainer, { type: "report" });

            // Create a config object with type of the object, Embed details and Token Type
            let reportLoadConfig = {
                type: "report",
                tokenType: models.TokenType.Embed,
                accessToken: {$reportConfig->embedToken},

                // Use other embed report config based on the requirement. We have used the first one for demo purpose
                embedUrl: {$reportConfig->embedUrl},

                // Enable this setting to remove gray shoulders from embedded report
                // settings: {
                //     background: models.BackgroundType.Transparent
                // }

                settings: {
                    // https://learn.microsoft.com/en-us/javascript/api/overview/powerbi/configure-report-settings#configure-edit-mode
                    permissions: models.Permissions.Read,
                    viewMode: models.ViewMode.View,

                    panes: {
                        bookmarks: {
                            visible: false
                        },
                        fields: {
                            expanded: false
                        },
                        filters: {
                            expanded: false,
                            visible: false
                        },
                        pageNavigation: {
                            visible: false
                        },
                        selection: {
                            visible: false
                        },
                        syncSlicers: {
                            visible: false
                        },
                        visualizations: {
                            expanded: false
                        }
                    },
                    bars: {
                        actionBar: {
                            visible: true
                        },
                        statusBar: {
                            visible: true
                        }
                    },
                    localeSettings: {
                        language: "en-us"
                    },
                    hideErrors: false,

                    /*Initial page*/
                    //pageName: 'ReportSection3',

                    //filters: [...], // https://learn.microsoft.com/en-us/javascript/api/overview/powerbi/control-report-filters
                    //slicers: slicerArray, // https://learn.microsoft.com/en-us/javascript/api/overview/powerbi/control-report-slicers

                    // onload bookmark - https://learn.microsoft.com/en-us/javascript/api/overview/powerbi/configure-report-settings#on-load-bookmark
                }

            };

            // Use the token expiry to regenerate Embed token for seamless end user experience
            // Refer https://aka.ms/RefreshEmbedToken
            tokenExpiry = {$reportConfig->expiration};

            // Embed Power BI report when Access token and Embed URL are available
            report = powerbi.embed(reportContainer, reportLoadConfig);

            // Clear any other loaded handler events
            report.off("loaded");

            // Triggers when a report schema is successfully loaded
            report.on("loaded", function () {
                console.log("Report load successful");
                /*report.getPages().then(function (pages) {
                    console.log(pages);
                });

                report.getSlicers().then(function(slicers) {
                    console.log(slicers);
                });

                report.getFilters().then(function(filters) {
                    console.log(filters);
                });*/

                const navigation = document.querySelectorAll("#left-report-nav .nav-link");
                navigation.forEach(function (link) {
                    link.addEventListener("click", function (e) {
                        e.preventDefault();
                        let page = e.target.getAttribute("data-page");
                        if(page) {
                            report.setPage(page);
                            // set all link to inactive
                            navigation.forEach(function (link) {
                                link.classList.remove("active");
                            });
                            // set clicked link to active
                            e.target.classList.add("active");
                        }
                    });
                });

                // Get all pages in the report
                report.getPages().then(function (pages) {
                    // foreach page save filters
                    pages.forEach(async function (page) {
                        // save filters
                        page.getFilters().then(function (filters) {
                            defaultFilters[page.name] = filters;
                        });
                    });
                });

                // Set the first page as active
                report.setPage({key($navigation)});

            });

            // Clear any other rendered handler events
            report.off("rendered");

            // Triggers when a report is successfully embedded in UI
            report.on("rendered", function () {
                console.log("Report render successful");
                // Get the last refresh date
                /*let lastRefreshDate = getLastRefreshDate({$reportConfig->datasetId}, {$reportConfig->embedToken});
                lastRefreshDate.then(function (date) {
                    console.log(date);
                    document.getElementById("last-refresh-date").innerHTML = date;
                });*/
            });

            // Clear any other error handler events
            report.off("error");

            // Handle embed errors
            report.on("error", function (event) {
                let errorMsg = event.detail;
                console.error(errorMsg);
            });

            // Clear any other pageChanged handler events
            report.off("pageChanged");

            // Save filters on page change
            report.on("pageChanged", async function (event) {
                let page = event.detail.newPage;
                // save slicers
                const visuals = await page.getVisuals();
                console.log(visuals);

                let slicers = visuals.filter(function (visual) {
                    return visual.type === "slicer" || visual.type === "advancedSlicerVisual";
                });

                slicers.forEach(async function(slicer) {
                    const state = await slicer.getSlicerState();
                    // save slicer state
                    if (defaultSlicers[slicer.name] === undefined) {
                        defaultSlicers[slicer.name] = state;
                    }
                });

            });

            // set default filters for active page on button click
            const setDefaultFiltersButton = document.getElementById("set-default-filters");
            if(setDefaultFiltersButton) {
                setDefaultFiltersButton.addEventListener("click", async function (e) {
                    e.preventDefault();
                    // Retrieve the page collection and then replace filters with the same target data field for the active page.
                    try {
                        const pages = await report.getPages();
                        // Retrieve the active page.
                        let page = pages.filter(function (page) {
                            return page.isActive
                        })[0];
                        await page.updateFilters(models.FiltersOperations.Replace, defaultFilters[page.name]);

                        const visuals = await page.getVisuals();

                        let slicers = visuals.filter(function (visual) {
                            return visual.type === "slicer" || visual.type === "advancedSlicerVisual";
                        });

                        slicers.forEach(async function(slicer) {
                            if (defaultSlicers[slicer.name] !== undefined) {
                                await slicer.setSlicerState(defaultSlicers[slicer.name]);
                            } else {
                                await slicer.setSlicerState({ filters: [] });
                            }
                        });

                    }
                    catch (errors) {
                        console.log(errors);
                    }
                });
            }
        });

        async function getLastRefreshDate(datasetId,accessToken) {

            const apiUrl = 'https://api.powerbi.com/v1.0/myorg/datasets/'+datasetId+'/refreshes';

            try {
                const response = await fetch(apiUrl, {
                    headers: {
                        'Authorization': 'Bearer '+accessToken,
                        'Content-Type': 'application/json'
                    }
                });

                if (!response.ok) {
                    console.error('Error fetching refresh history: '+response.status);
                    return null;
                }

                const data = await response.json();

                if (data.value && data.value.length > 0) {
                    // Sort refresh history by end time in descending order
                    data.value.sort((a, b) => new Date(b.endTime) - new Date(a.endTime));

                    // Find the last successful refresh
                    const lastSuccessfulRefresh = data.value.find(refresh => refresh.status === 'Completed');

                    if (lastSuccessfulRefresh) {
                        return new Date(lastSuccessfulRefresh.endTime).toLocaleString(); // Format as needed
                    } else {
                        return "No successful refreshes found.";
                    }
                } else {
                    return "No refresh history available.";
                }

            } catch (error) {
                console.error("Error:", error);
                return null;
            }
        }

    </script>
{/block}