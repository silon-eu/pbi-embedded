{block title}{$reportName}{/block}
{block header_tmpl}
{/block}

{block pageHeading}
    <span class="text-light d-inline-block px-2">/</span>
    <a n:href=":Reporting:Dashboard:default, 'activeTab' => 'demo'" class="text-white">SILON CZ</a>
    <span class="text-light d-inline-block px-2">/</span>
    {*{$reportConfig->name}*}
    {$reportName}
{/block}

{block header}
{/block}

{block content}
    {var $today = new DateTime()}
    <div class="row">
        <div class="col-2 pt-3">
            <ul id="left-report-nav" class="nav flex-column" n:inner-foreach="$navigation as $navItemKey => $navItem">
                <li class="nav-item mb-1">
                    <a n:class="$iterator->first ? 'active', 'nav-link'" href="#" data-page="{$navItemKey}">
                        {$navItem['name']}
                    </a>
                    <ul
                        n:if="isset($navItem['items']) && count($navItem['items']) > 0"
                        n:inner-foreach="$navItem['items'] as $subNavItemKey => $subNavItem"
                        class="nav flex-column mb-2"
                    >
                        <li class="nav-item">
                            <a n:class="$iterator->parent->first && $iterator->first ? 'active', 'nav-link'" href="#" data-page="{$subNavItemKey}">
                                {$subNavItem}
                            </a>
                        </li>
                    </ul>
                </li>
            </ul>
        </div>
        <div class="col-10">
            <div id="report-container" class="with-sidebar"></div>
        </div>
    </div>


    <script src="{$basePath}/assets/js/powerbi.min.js"></script>
    <script>


        document.addEventListener("DOMContentLoaded", function() {
            console.log('ready');

            let models = window["powerbi-client"].models;
            let reportContainer = document.getElementById("report-container");

            // Initialize iframe for embedding report
            powerbi.bootstrap(reportContainer, { type: "report" });

            // Create a config object with type of the object, Embed details and Token Type
            let reportLoadConfig = {
                type: "report",
                tokenType: models.TokenType.Embed,
                accessToken: {$reportConfig->embedToken},

                // Use other embed report config based on the requirement. We have used the first one for demo purpose
                embedUrl: {$reportConfig->embedUrl},

                // Enable this setting to remove gray shoulders from embedded report
                // settings: {
                //     background: models.BackgroundType.Transparent
                // }

                settings: {
                    // https://learn.microsoft.com/en-us/javascript/api/overview/powerbi/configure-report-settings#configure-edit-mode
                    permissions: models.Permissions.Read,
                    viewMode: models.ViewMode.View,

                    panes: {
                        bookmarks: {
                            visible: false
                        },
                        fields: {
                            expanded: false
                        },
                        filters: {
                            expanded: false,
                            visible: false
                        },
                        pageNavigation: {
                            visible: false
                        },
                        selection: {
                            visible: false
                        },
                        syncSlicers: {
                            visible: false
                        },
                        visualizations: {
                            expanded: false
                        }
                    },
                    bars: {
                        actionBar: {
                            visible: true
                        },
                        statusBar: {
                            visible: true
                        }
                    },
                    localeSettings: {
                        language: "en-us"
                    },
                    hideErrors: false,

                    /*Initial page*/
                    //pageName: 'ReportSection3',

                    //filters: [...], // https://learn.microsoft.com/en-us/javascript/api/overview/powerbi/control-report-filters
                    //slicers: slicerArray, // https://learn.microsoft.com/en-us/javascript/api/overview/powerbi/control-report-slicers

                    // onload bookmark - https://learn.microsoft.com/en-us/javascript/api/overview/powerbi/configure-report-settings#on-load-bookmark
                }

            };

            // Use the token expiry to regenerate Embed token for seamless end user experience
            // Refer https://aka.ms/RefreshEmbedToken
            tokenExpiry = {$reportConfig->expiration};

            // Embed Power BI report when Access token and Embed URL are available
            let report = powerbi.embed(reportContainer, reportLoadConfig);

            // Clear any other loaded handler events
            report.off("loaded");

            // Triggers when a report schema is successfully loaded
            report.on("loaded", function () {
                console.log("Report load successful");
                /*report.getPages().then(function (pages) {
                    console.log(pages);
                });

                report.getSlicers().then(function(slicers) {
                    console.log(slicers);
                });

                report.getFilters().then(function(filters) {
                    console.log(filters);
                });*/

                const navigation = document.querySelectorAll("#left-report-nav .nav-link");
                navigation.forEach(function (link) {
                    link.addEventListener("click", function (e) {
                        e.preventDefault();
                        let page = e.target.getAttribute("data-page");
                        if(page) {
                            report.setPage(page);
                            // set all link to inactive
                            navigation.forEach(function (link) {
                                link.classList.remove("active");
                            });
                            // set clicked link to active
                            e.target.classList.add("active");
                        }
                    });
                });

                // Set the first page as active
                report.setPage({key($navigation)});

            });

            // Clear any other rendered handler events
            report.off("rendered");

            // Triggers when a report is successfully embedded in UI
            report.on("rendered", function () {
                console.log("Report render successful");
            });

            // Clear any other error handler events
            report.off("error");

            // Handle embed errors
            report.on("error", function (event) {
                let errorMsg = event.detail;
                console.error(errorMsg);
                return;
            });


        });
    </script>
{/block}